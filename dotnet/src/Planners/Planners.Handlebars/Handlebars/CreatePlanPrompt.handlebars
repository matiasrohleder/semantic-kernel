{{#message role="system"}}## Instructions
Explain how to achieve the user's goal with the available helpers with a Handlebars template.

## Example
If the user wanted you to {{#if allowLoops}}generate 10 random numbers and use them in another helper{{else}}return the sum of 3 numbers{{/if}}, you could answer with the following.{{/message}}
{{#message role="user"}}Please show me how to write a Handlebars template that achieves the following goal.

{{#if allowLoops}}## Goal
I want you to generate 10 random numbers and send them to another helper.
{{else}}## Goal
What's the sum of 5+10+15?
{{~/if}}{{/message}}
{{#message role="assistant"}}Here's the Handlebars template that achieves the goal:
```handlebars
{{#if allowLoops}}
\{{!-- Step 1: Identify key values --}}
\{{set
  "count"
  10
}}
\{{!-- Step 2: Loop using the count --}}
\{{#each
  (range
    1
    count
  )
}}
  \{{!-- Step 3: Create random number --}}
  \{{set
    "randomNumber"
    (Example{{nameDelimiter}}Random
      seed=this
    )
  }}
  \{{!-- Step 4: Call example helper with random number and print the result to the screen --}}
  \{{set
    "result"
    (Example{{nameDelimiter}}Helper
      input=randomNumber
    )
  }}
  \{{json (concat "The result" " " "is:" " " result)}}
\{{/each}}
{{else}}
\{{!-- Step 1: Initialize the variables --}}
\{{set
  "num1"
  5
}}
\{{set
  "num2"
  10
}}
\{{set
  "num3"
  15
}}
\{{!-- Step 2: Call the Example helper with the variables and store the result --}}
\{{set
  "sum"
  (Example{{nameDelimiter}}AddNums
    num1=num1
    num2=num2
    num3=num3
  )
}}
\{{!-- Step 3: Print the result using the json helper --}}
\{{json (concat "The sum of " num1 "+" num2 "+" num3 " " "is" " " sum)}}
{{/if}}
```{{/message}}
{{#message role="system"}}Now let's try the real thing.{{/message}}
{{#message role="user"}}
The following helpers are available to you:

## Out-of-the-box helpers
- `\{{#if}}\{{/if}}`
- `\{{#unless}}\{{/unless}}`{{#if allowLoops}}
- `\{{#each}}\{{/each}}`{{/if}}
- `\{{#with}}\{{/with}}`

{{#if allowLoops}}
## Loop helpers
If you need to loop through a list of values with `\{{#each}}`, you can use the following helpers:
- `\{{range}}` – Generates a list of integral numbers within a specified range, inclusive of the first and last value.
- `\{{array}}` – Generates an array of values from the given values (zero-indexed).

IMPORTANT: `range` and `array` are the only supported data structures. Others like `hash` are not supported. Also, you cannot use any methods or properties on the built-in data structures.

## Math helpers
If you need to do basic operations, you can use these two helpers with numerical values:
- `\{{add}}` – Adds two values together.
- `\{{subtract}}` – Subtracts the second value from the first.

{{/if}}
## Comparison helpers
If you need to compare two values, you can use the `\{{equals}}` helper.
To use the {{#if allowLoops}}math and {{/if}}comparison helpers, you must pass in two positional values. For example, to check if the variable `var` is equal to number `1`, you would use the following helper like so: `\{{#if (equals var 1)}}\{{/if}}`.

## Variable helpers
If you need to create or retrieve a variable, you can use the following helpers:
- `\{{set}}` – Creates a variable with the given name and value. It does not print anything to the template, so you must use `\{{json}}` to print the value.
- `\{{json}}` – Generates and prints a JSON string from the given value.
- `\{{concat}}` – Concatenates the given values into one string.

{{#if (or complexTypeDefinitions complexSchemaDefinitions)}}
## Complex types
Some helpers require arguments that are complex objects. The JSON schemas for these complex objects are defined below:

{{#each complexTypeDefinitions}}
### {{Name}}:
{
  "type": "Object",
  "properties": {
  {{#each Properties}}
    "{{Name}}": {
      "type": "{{ParameterType.Name}}",
    },
  {{/each}}
  }
}

{{/each}}
{{#each complexSchemaDefinitions}}
### {{@key}}:
{{this}}

{{/each}}
{{/if}}
## Custom helpers
Lastly, you have the following custom helpers to use.

{{#each functions}}
### `{{doubleOpen}}{{PluginName}}{{../nameDelimiter}}{{Name}}{{doubleClose}}`
Description: {{Description}}
Inputs:
  {{#each Parameters}}
    - {{Name}}:
    {{~#if ParameterType}} {{ParameterType.Name}} -
    {{~else}}
        {{~#if Schema}} {{getSchemaTypeName this}} -{{/if}}
    {{~/if}}
    {{~#if Description}} {{Description}}{{/if}}
    {{~#if IsRequired}} (required){{else}} (optional){{/if}}
  {{/each}}
Output:
{{~#if ReturnParameter}}
  {{~#if ReturnParameter.ParameterType}} {{ReturnParameter.ParameterType.Name}}
  {{~else}}
    {{~#if ReturnParameter.Schema}} {{getSchemaReturnTypeName ReturnParameter Name}}
    {{else}} string{{/if}}
  {{~/if}}
  {{~#if ReturnParameter.Description}} - {{ReturnParameter.Description}}{{/if}}
{{/if}}

{{/each}}
IMPORTANT: You can only use the helpers that are listed above. Do not use any other helpers that are not explicitly listed here. For example, do not use `\{{log}}` or any `\{{Example}}` helpers, as they are not supported.{{/message}}
{{#message role="user"}}Please show me how to write a Handlebars template that achieves the following goal with the available helpers.
{{#if lastError}}
{{#message role="system"}}
## Previous attempt
This previous plan failed to achieve the goal:
```handlebars
{{lastPlan}}
```

The error was :
```
{{lastError}}
```

Try again to achieve the goal while fixing the error.{{/message}}
{{/if}}

## Goal
{{goal}}{{/message}}
{{#message role="system"}}
## Tips and reminders
- Add a comment above each step to describe what the step does.
- Each variable should have a well-defined name.
- Be extremely careful about types. For example, if you pass an array to a helper that expects a number, the template will error out.
- Each step should contain only one helper call.

## Start
Follow these steps to create one Handlebars template to achieve the goal:
1. Identify Key Values:
  - Read the goal carefully and note any numbers, strings, or conditions that you'll need. Do not truncate or modify any data.
  - Use the `\{{set}}` helper to create a variable for each key value.
2. Choose the Right Helpers:
  - Use the provided helpers to manipulate the variables you've created. Start with the basic helpers and only use custom helpers if necessary to accomplish the goal.
  - Always reference a custom helper by its full name.
3. Don't Create or Assume Unlisted Helpers:
  - Only use the helpers provided. Any helper not listed is considered hallucinated and must not be used.
  - Do not invent or assume the existence of any functions not explicitly defined above.
4. What if I Need More Helpers?
  - If the goal cannot be fully achieved with the provided helpers or you reference a hallucinated helper, print the following message: "{{insufficientFunctionsErrorMessage}}".
5. Keep It Simple:
  - Your template should be intelligent and efficient, avoiding unnecessary complexity or redundant steps.
{{#if allowLoops}}  - Avoid using loops or block expressions. They are allowed but not always necessary, so try to find a solution that does not use them.{{/if}}
6. No Nested Helpers:
  - Do not nest helpers or conditionals inside other helpers. This can cause errors in the template.
7. Output the Result:
  - Once you have completed the necessary steps to reach the goal, use the `\{{json}}` helper to output the final result.
  - Ensure your template and all steps are enclosed in a ``` handlebars block.

Remember, the objective is not to use all the helpers available, but to use the correct ones to achieve the desired outcome with a clear and concise template.{{/message}}